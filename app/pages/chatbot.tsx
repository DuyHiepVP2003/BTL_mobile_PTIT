import React, { useState, useRef, useEffect } from 'react';
import { 
  View, 
  Text, 
  StyleSheet, 
  TextInput, 
  TouchableOpacity, 
  KeyboardAvoidingView,
  Platform,
  ScrollView,
  SafeAreaView,
  ActivityIndicator
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { Stack, useRouter } from 'expo-router';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { OpenWeatherMapService } from '@/services/api/openWeatherMapService';

type Message = {
  id: string;
  text: string;
  isUser: boolean;
  timestamp: string;
  read?: boolean;
  isLoading?: boolean;
};

// C√°c c√¢u tr·∫£ l·ªùi v·ªÅ th·ªùi ti·∫øt
const WEATHER_RESPONSES = {
  GREETING: 'Xin ch√†o! T√¥i l√† chatbot th·ªùi ti·∫øt. T√¥i c√≥ th·ªÉ cung c·∫•p th√¥ng tin v·ªÅ th·ªùi ti·∫øt hi·ªán t·∫°i, d·ª± b√°o, v√† c√°c th√¥ng tin kh√°c li√™n quan ƒë·∫øn th·ªùi ti·∫øt. B·∫°n c·∫ßn t√¨m hi·ªÉu th√¥ng tin g√¨?',
  HELP: 'T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n‚Ä¢ Th·ªùi ti·∫øt hi·ªán t·∫°i (H√† N·ªôi th·∫ø n√†o?)\n‚Ä¢ D·ª± b√°o th·ªùi ti·∫øt (Th·ªùi ti·∫øt ng√†y mai?)\n‚Ä¢ Th√¥ng tin v·ªÅ c√°c hi·ªán t∆∞·ª£ng th·ªùi ti·∫øt\n‚Ä¢ G·ª£i √Ω trang ph·ª•c theo th·ªùi ti·∫øt\n‚Ä¢ Th√¥ng b√°o th·ªùi ti·∫øt x·∫•u',
  FALLBACK: 'T√¥i kh√¥ng hi·ªÉu c√¢u h·ªèi c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ th·ªùi ti·∫øt hi·ªán t·∫°i, d·ª± b√°o, ho·∫∑c g√µ "tr·ª£ gi√∫p" ƒë·ªÉ xem c√°c l·ª±a ch·ªçn.',
  LOADING: 'ƒêang t√¨m th√¥ng tin th·ªùi ti·∫øt cho b·∫°n...',
  ERROR: 'Xin l·ªói, t√¥i kh√¥ng th·ªÉ l·∫•y th√¥ng tin th·ªùi ti·∫øt l√∫c n√†y. Vui l√≤ng th·ª≠ l·∫°i sau.',
  WEATHER_ADVICE: {
    HOT: 'Tr·ªùi n√≥ng, b·∫°n n√™n m·∫∑c qu·∫ßn √°o tho√°ng m√°t, mang theo n∆∞·ªõc v√† tr√°nh ra ngo√†i v√†o gi·ªù n·∫Øng g·∫Øt.',
    COLD: 'Tr·ªùi l·∫°nh, b·∫°n n√™n m·∫∑c √°o ·∫•m, ƒë·ªôi m≈© v√† ƒëeo gƒÉng tay khi ra ngo√†i.',
    RAIN: 'Tr·ªùi ƒëang c√≥ m∆∞a, b·∫°n n√™n mang theo √¥ ho·∫∑c √°o m∆∞a khi ra ngo√†i.',
    STORM: 'C·∫£nh b√°o c√≥ b√£o/gi√¥ng, b·∫°n n√™n ·ªü trong nh√† v√† tr√°nh ƒëi ra ngo√†i n·∫øu kh√¥ng c·∫ßn thi·∫øt.'
  }
};

// C√°c t·ª´ kh√≥a ƒë·ªÉ nh·∫≠n di·ªán c√¢u h·ªèi
const WEATHER_KEYWORDS = {
  CURRENT: ['th·ªùi ti·∫øt hi·ªán t·∫°i', 'th·ªùi ti·∫øt h√¥m nay', 'hi·ªán t·∫°i', 'b√¢y gi·ªù', 'h√¥m nay', 'th·∫ø n√†o'],
  FORECAST: ['d·ª± b√°o', 'ng√†y mai', 'tu·∫ßn n√†y', 'tu·∫ßn sau', 'd·ª± b√°o th·ªùi ti·∫øt'],
  ADVICE: ['n√™n m·∫∑c', 'trang ph·ª•c', 'qu·∫ßn √°o', 'n√™n mang', 'n√™n ƒëem', 'n√™n chu·∫©n b·ªã'],
  WARNING: ['c·∫£nh b√°o', 'nguy hi·ªÉm', 'b√£o', 'l·ª•t', 'ng·∫≠p', 'm∆∞a l·ªõn', 'thi√™n tai'],
  GREETING: ['xin ch√†o', 'ch√†o', 'hi', 'hello', 'hey', 'alo'],
  HELP: ['tr·ª£ gi√∫p', 'gi√∫p ƒë·ª°', 'gi√∫p', 'help', 'h∆∞·ªõng d·∫´n', 'b·∫°n c√≥ th·ªÉ l√†m g√¨']
};

export default function ChatbotScreen() {
  const router = useRouter();
  const [message, setMessage] = useState('');
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      text: 'Ch√†o b·∫°n',
      isUser: false,
      timestamp: `Chatbot ${new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}`
    },
    {
      id: '2',
      text: 'T√¥i l√† chatbot th·ªùi ti·∫øt. T√¥i c√≥ th·ªÉ cung c·∫•p th√¥ng tin v·ªÅ th·ªùi ti·∫øt hi·ªán t·∫°i, d·ª± b√°o, v√† c√°c th√¥ng tin kh√°c li√™n quan ƒë·∫øn th·ªùi ti·∫øt. B·∫°n c·∫ßn t√¨m hi·ªÉu th√¥ng tin g√¨?',
      isUser: false,
      timestamp: `Chatbot ${new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}`
    }
  ]);
  const [isTyping, setIsTyping] = useState(false);
  const scrollViewRef = useRef<ScrollView>(null);
  const weatherService = new OpenWeatherMapService();
  const [savedCity, setSavedCity] = useState('Hanoi,vn');

  // L·∫•y th√†nh ph·ªë ƒë√£ l∆∞u
  useEffect(() => {
    const getCity = async () => {
      const city = await AsyncStorage.getItem('lastCity');
      if (city) setSavedCity(city);
    };
    getCity();
  }, []);

  // T·ª± ƒë·ªông cu·ªôn xu·ªëng cu·ªëi c√πng khi c√≥ tin nh·∫Øn m·ªõi
  useEffect(() => {
    if (scrollViewRef.current) {
      setTimeout(() => {
        scrollViewRef.current?.scrollToEnd({ animated: true });
      }, 100);
    }
  }, [messages]);

  // H√†m ph√¢n t√≠ch n·ªôi dung tin nh·∫Øn ƒë·ªÉ x√°c ƒë·ªãnh c√¢u h·ªèi
  const analyzeMessage = (text: string): string => {
    const lowerText = text.toLowerCase();
    
    // Ki·ªÉm tra l·ªùi ch√†o
    if (WEATHER_KEYWORDS.GREETING.some(keyword => lowerText.includes(keyword))) {
      return 'GREETING';
    }

    // Ki·ªÉm tra y√™u c·∫ßu tr·ª£ gi√∫p
    if (WEATHER_KEYWORDS.HELP.some(keyword => lowerText.includes(keyword))) {
      return 'HELP';
    }

    // Ki·ªÉm tra th·ªùi ti·∫øt hi·ªán t·∫°i
    if (WEATHER_KEYWORDS.CURRENT.some(keyword => lowerText.includes(keyword))) {
      // T√¨m ki·∫øm th√†nh ph·ªë trong c√¢u h·ªèi
      const cityPattern = /(?:·ªü|t·∫°i|c·ªßa|·ªü|in)\s+([A-Za-z\s]+)(?:\?|$|,|\s)/i;
      const match = text.match(cityPattern);
      if (match && match[1]) {
        return `CURRENT:${match[1].trim()}`;
      }
      return 'CURRENT';
    }

    // Ki·ªÉm tra d·ª± b√°o th·ªùi ti·∫øt
    if (WEATHER_KEYWORDS.FORECAST.some(keyword => lowerText.includes(keyword))) {
      const cityPattern = /(?:·ªü|t·∫°i|c·ªßa|·ªü|in)\s+([A-Za-z\s]+)(?:\?|$|,|\s)/i;
      const match = text.match(cityPattern);
      if (match && match[1]) {
        return `FORECAST:${match[1].trim()}`;
      }
      return 'FORECAST';
    }

    // Ki·ªÉm tra y√™u c·∫ßu t∆∞ v·∫•n trang ph·ª•c
    if (WEATHER_KEYWORDS.ADVICE.some(keyword => lowerText.includes(keyword))) {
      return 'ADVICE';
    }

    // Ki·ªÉm tra v·ªÅ c·∫£nh b√°o th·ªùi ti·∫øt
    if (WEATHER_KEYWORDS.WARNING.some(keyword => lowerText.includes(keyword))) {
      return 'WARNING';
    }

    // N·∫øu kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c √Ω ƒë·ªãnh
    return 'UNKNOWN';
  };

  // H√†m l·∫•y d·ªØ li·ªáu th·ªùi ti·∫øt hi·ªán t·∫°i
  const getCurrentWeather = async (city: string = savedCity): Promise<string> => {
    try {
      const weatherData = await weatherService.getCurrentWeather(city);
      
      // Format th√¥ng tin th·ªùi ti·∫øt ƒë·ªÉ hi·ªÉn th·ªã
      const temp = Math.round(weatherData.temperature);
      const condition = weatherService.translateCondition(weatherData.condition);
      const humidity = weatherData.humidity;
      const windSpeed = weatherData.windSpeed;
      
      // T·∫°o c√¢u tr·∫£ l·ªùi
      let response = `üìç Th·ªùi ti·∫øt t·∫°i ${weatherData.location}, ${weatherData.country}:\n`;
      response += `üå°Ô∏è Nhi·ªát ƒë·ªô: ${temp}¬∞C\n`;
      response += `üå§Ô∏è Th·ªùi ti·∫øt: ${condition}\n`;
      response += `üíß ƒê·ªô ·∫©m: ${humidity}%\n`;
      response += `üí® Gi√≥: ${windSpeed} km/h\n`;
      
      // Th√™m th√¥ng tin v·ªÅ m∆∞a n·∫øu c√≥
      if (weatherData.rain && weatherData.rain > 0) {
        response += `üåßÔ∏è L∆∞·ª£ng m∆∞a: ${weatherData.rain} mm\n`;
      }
      
      // Th√™m l·ªùi khuy√™n v·ªÅ th·ªùi ti·∫øt
      if (temp > 30) {
        response += `\n${WEATHER_RESPONSES.WEATHER_ADVICE.HOT}`;
      } else if (temp < 15) {
        response += `\n${WEATHER_RESPONSES.WEATHER_ADVICE.COLD}`;
      }
      
      if (weatherData.conditionMain?.toLowerCase().includes('rain')) {
        response += `\n${WEATHER_RESPONSES.WEATHER_ADVICE.RAIN}`;
      }
      
      if (weatherData.conditionMain?.toLowerCase().includes('storm') || 
          weatherData.conditionMain?.toLowerCase().includes('thunder')) {
        response += `\n${WEATHER_RESPONSES.WEATHER_ADVICE.STORM}`;
      }
      
      // L∆∞u th√†nh ph·ªë ƒë√£ t√¨m ki·∫øm
      if (city !== savedCity) {
        await AsyncStorage.setItem('lastCity', city);
        setSavedCity(city);
      }
      
      return response;
    } catch (error) {
      console.error("Error fetching weather:", error);
      return WEATHER_RESPONSES.ERROR;
    }
  };

  // X·ª≠ l√Ω ph·∫£n h·ªìi t·ª´ chatbot d·ª±a tr√™n tin nh·∫Øn ng∆∞·ªùi d√πng
  const getBotResponse = async (userMessage: string): Promise<string> => {
    const intent = analyzeMessage(userMessage);
    
    switch(intent) {
      case 'GREETING':
        return WEATHER_RESPONSES.GREETING;
        
      case 'HELP':
        return WEATHER_RESPONSES.HELP;
        
      case 'CURRENT':
        return await getCurrentWeather();
        
      case 'FORECAST':
        return "Ch·ª©c nƒÉng d·ª± b√°o ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn. Hi·ªán t·∫°i t√¥i ch·ªâ c√≥ th·ªÉ cung c·∫•p th√¥ng tin th·ªùi ti·∫øt hi·ªán t·∫°i.";
        
      case 'ADVICE':
        // L·∫•y th·ªùi ti·∫øt hi·ªán t·∫°i ƒë·ªÉ ƒë∆∞a ra l·ªùi khuy√™n
        try {
          const weatherData = await weatherService.getCurrentWeather(savedCity);
          const temp = weatherData.temperature;
          
          if (temp > 30) {
            return WEATHER_RESPONSES.WEATHER_ADVICE.HOT;
          } else if (temp < 15) {
            return WEATHER_RESPONSES.WEATHER_ADVICE.COLD;
          } else {
            return "Th·ªùi ti·∫øt kh√° d·ªÖ ch·ªãu. B·∫°n c√≥ th·ªÉ m·∫∑c qu·∫ßn √°o th√¥ng th∆∞·ªùng.";
          }
        } catch {
          return "T√¥i c·∫ßn bi·∫øt th·ªùi ti·∫øt hi·ªán t·∫°i ƒë·ªÉ ƒë∆∞a ra l·ªùi khuy√™n v·ªÅ trang ph·ª•c. Vui l√≤ng h·ªèi l·∫°i sau.";
        }
        
      case 'WARNING':
        return "Hi·ªán t·∫°i kh√¥ng c√≥ c·∫£nh b√°o th·ªùi ti·∫øt nguy hi·ªÉm n√†o trong khu v·ª±c c·ªßa b·∫°n.";
        
      default:
        // X·ª≠ l√Ω khi c√≥ th√¥ng tin th√†nh ph·ªë
        if (intent.startsWith('CURRENT:')) {
          const city = intent.split(':')[1];
          return await getCurrentWeather(city);
        }
        
        if (intent.startsWith('FORECAST:')) {
          return "Ch·ª©c nƒÉng d·ª± b√°o ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn. Hi·ªán t·∫°i t√¥i ch·ªâ c√≥ th·ªÉ cung c·∫•p th√¥ng tin th·ªùi ti·∫øt hi·ªán t·∫°i.";
        }
        
        return WEATHER_RESPONSES.FALLBACK;
    }
  };

  // X·ª≠ l√Ω g·ª≠i tin nh·∫Øn
  const handleSend = async () => {
    if (message.trim()) {
      const newUserMessage: Message = {
        id: Date.now().toString(),
        text: message,
        isUser: true,
        timestamp: `B·∫°n ${new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}`,
        read: false
      };
      
      // Tin nh·∫Øn "ƒëang nh·∫≠p" t·ª´ bot
      const loadingMessage: Message = {
        id: (Date.now() + 1).toString(),
        text: '',
        isUser: false,
        timestamp: `Chatbot ${new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}`,
        isLoading: true
      };
      
      setMessages(prev => [...prev, newUserMessage, loadingMessage]);
      setMessage('');
      setIsTyping(true);
      
      try {
        // X·ª≠ l√Ω ph·∫£n h·ªìi t·ª´ bot
        const botText = await getBotResponse(message);
        
        // Thay th·∫ø tin nh·∫Øn "ƒëang nh·∫≠p" b·∫±ng tin nh·∫Øn th·ª±c t·∫ø
        const botResponse: Message = {
          id: (Date.now() + 2).toString(),
          text: botText,
          isUser: false,
          timestamp: `Chatbot ${new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}`
        };
        
        setMessages(prev => 
          prev.filter(msg => !msg.isLoading).concat(botResponse)
        );
      } catch (error) {
        // X·ª≠ l√Ω l·ªói
        const errorMessage: Message = {
          id: (Date.now() + 3).toString(),
          text: WEATHER_RESPONSES.ERROR,
          isUser: false,
          timestamp: `Chatbot ${new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}`
        };
        
        setMessages(prev => 
          prev.filter(msg => !msg.isLoading).concat(errorMessage)
        );
      } finally {
        setIsTyping(false);
      }
    }
  };

  // C√°c c√¢u g·ª£i √Ω ƒë·ªÉ ng∆∞·ªùi d√πng c√≥ th·ªÉ ch·ªçn
  const suggestions = [
    "Th·ªùi ti·∫øt H√† N·ªôi h√¥m nay?",
    "Th·ªùi ti·∫øt ·ªü TP.HCM?",
    "N√™n m·∫∑c g√¨ h√¥m nay?",
    "C√≥ m∆∞a kh√¥ng?",
    "Tr·ª£ gi√∫p"
  ];

  const handleSuggestionPress = (text: string) => {
    setMessage(text);
  };

  return (
    <SafeAreaView style={styles.container}>
      <Stack.Screen 
        options={{
          headerShown: false,
        }}
      />
      
      {/* Header */}
      <View style={styles.header}>
        <View style={styles.headerLeft}>
          <Text style={styles.headerDots}>‚Ä¢‚Ä¢‚Ä¢</Text>
          <Text style={styles.headerTitle}>Chatbot Th·ªùi ti·∫øt</Text>
        </View>
        <View style={styles.headerRight}>
          <TouchableOpacity style={styles.headerButton} onPress={() => router.back()}>
            <Ionicons name="remove" size={24} color="#333" />
          </TouchableOpacity>
          <TouchableOpacity style={styles.headerButton} onPress={() => router.back()}>
            <Ionicons name="close" size={20} color="#333" />
          </TouchableOpacity>
        </View>
      </View>
      
      {/* Bot Info */}
      <View style={styles.botInfo}>
        <View style={styles.botIconContainer}>
          <Ionicons name="cloudy" size={24} color="white" />
        </View>
        <View style={styles.botTextContainer}>
          <Text style={styles.botName}>Weatherbot</Text>
          <Text style={styles.botDescription}>H·ªó tr·ª£ th√¥ng tin th·ªùi ti·∫øt 24/7</Text>
        </View>
      </View>
      
      {/* Chat Messages */}
      <ScrollView 
        ref={scrollViewRef}
        style={styles.messagesContainer}
      >
        {messages.map((msg) => (
          <View 
            key={msg.id} 
            style={[
              styles.messageWrapper,
              msg.isUser ? styles.userMessageWrapper : styles.botMessageWrapper
            ]}
          >
            <Text style={styles.timestamp}>{msg.timestamp}</Text>
            <View style={[
              styles.messageBubble, 
              msg.isUser ? styles.userBubble : styles.botBubble
            ]}>
              {msg.isLoading ? (
                <ActivityIndicator size="small" color="#666" />
              ) : (
                <Text style={[
                  styles.messageText,
                  msg.isUser ? styles.userMessageText : styles.botMessageText
                ]}>
                  {msg.text}
                </Text>
              )}
            </View>
            {msg.isUser && msg.read && (
              <Text style={styles.readStatus}>Read</Text>
            )}
          </View>
        ))}
      </ScrollView>
      
      {/* Suggestions */}
      <View style={styles.suggestionsContainer}>
        <ScrollView horizontal showsHorizontalScrollIndicator={false}>
          {suggestions.map((suggestion, index) => (
            <TouchableOpacity 
              key={index}
              style={styles.suggestionButton}
              onPress={() => handleSuggestionPress(suggestion)}
            >
              <Text style={styles.suggestionText}>{suggestion}</Text>
            </TouchableOpacity>
          ))}
        </ScrollView>
      </View>
      
      {/* Message Input */}
      <KeyboardAvoidingView
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
        style={styles.inputContainer}
      >
        <TextInput
          style={styles.input}
          value={message}
          onChangeText={setMessage}
          placeholder="Nh·∫≠p tin nh·∫Øn v·ªÅ th·ªùi ti·∫øt"
          placeholderTextColor="#666"
          multiline
        />
        <TouchableOpacity 
          style={styles.sendButton} 
          onPress={handleSend}
          disabled={!message.trim() || isTyping}
        >
          <Ionicons 
            name="send" 
            size={24} 
            color={(message.trim() && !isTyping) ? "#0066FF" : "#999"} 
          />
        </TouchableOpacity>
      </KeyboardAvoidingView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F5F5F5',
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 16,
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: '#E0E0E0',
    backgroundColor: '#FFFFFF',
  },
  headerLeft: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  headerDots: {
    fontSize: 18,
    marginRight: 8,
  },
  headerTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333',
  },
  headerRight: {
    flexDirection: 'row',
  },
  headerButton: {
    marginLeft: 16,
  },
  botInfo: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 16,
    backgroundColor: '#FFFFFF',
    borderBottomWidth: 1,
    borderBottomColor: '#E0E0E0',
  },
  botIconContainer: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: '#4A90E2',
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 12,
  },
  botTextContainer: {
    flex: 1,
  },
  botName: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333',
  },
  botDescription: {
    fontSize: 14,
    color: '#666',
  },
  messagesContainer: {
    flex: 1,
    padding: 16,
  },
  messageWrapper: {
    marginBottom: 16,
    maxWidth: '80%',
  },
  userMessageWrapper: {
    alignSelf: 'flex-end',
  },
  botMessageWrapper: {
    alignSelf: 'flex-start',
  },
  timestamp: {
    fontSize: 12,
    color: '#666',
    marginBottom: 4,
  },
  messageBubble: {
    padding: 12,
    borderRadius: 16,
    maxWidth: '100%',
    minHeight: 40,
    justifyContent: 'center',
  },
  botBubble: {
    backgroundColor: '#FFFFFF',
    borderWidth: 1,
    borderColor: '#E0E0E0',
  },
  userBubble: {
    backgroundColor: '#0066FF',
  },
  messageText: {
    fontSize: 14,
    lineHeight: 20,
  },
  userMessageText: {
    color: '#FFFFFF',
  },
  botMessageText: {
    color: '#333333',
  },
  readStatus: {
    fontSize: 12,
    color: '#666',
    alignSelf: 'flex-end',
    marginTop: 4,
  },
  suggestionsContainer: {
    paddingHorizontal: 8,
    paddingVertical: 12,
    backgroundColor: '#FFFFFF',
    borderTopWidth: 1,
    borderTopColor: '#E0E0E0',
  },
  suggestionButton: {
    backgroundColor: '#F0F2F5',
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderRadius: 16,
    marginHorizontal: 4,
  },
  suggestionText: {
    color: '#333333',
    fontSize: 13,
  },
  inputContainer: {
    flexDirection: 'row',
    padding: 12,
    backgroundColor: '#FFFFFF',
    borderTopWidth: 1,
    borderTopColor: '#E0E0E0',
  },
  input: {
    flex: 1,
    maxHeight: 100,
    backgroundColor: '#F5F5F5',
    borderRadius: 20,
    paddingHorizontal: 16,
    paddingVertical: 10,
    fontSize: 14,
    color: '#333',
  },
  sendButton: {
    width: 40,
    height: 40,
    justifyContent: 'center',
    alignItems: 'center',
    marginLeft: 8,
  },
});